#!/usr/bin/env node

/**
 * DB mongoose dependencies.
 */
const dotenv = require('dotenv');
dotenv.config();
const mongoose = require('mongoose');
// const MongoClient = require('mongodb').MongoClient;
const fs = require('fs');
const uri = process.env.MONGODB_URI;
// const client = new MongoClient(uri, { useNewUrlParser: true });


// mongoose.connect(uri, { useNewUrlParser: true, dbName: 'Test-Cluster' });
mongoose.connect(uri, {
    keepAlive: 1,
    useNewUrlParser: true,
    dbName: 'ToDo'
});
mongoose.Promise = global.Promise;
mongoose.connection
  .on('connected', () => {
    console.log('Mongoose connection open on', uri);
  })
  .on('error', (err) => {
    console.log('Connection error: ', err.message);
  });

// const MongoClient = require('mongodb').MongoClient;
// const uri = "mongodb+srv://admin:pw0rd@todo-wrmew.mongodb.net/test?retryWrites=true";
// const client = new MongoClient(uri, { useNewUrlParser: true });
// client.connect(err => {
//   const collection = client.db("test").collection("devices");
//   // perform actions on the collection object
//   client.close();
// });


/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('todolistapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
